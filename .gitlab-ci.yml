# GitLab CI/CD Pipeline for Tekton POC
# Triggers Tekton Pipeline on internal Kubernetes cluster via EventListener
# Compatible with existing GitHub Actions workflow logic

stages:
  - check-environment
  - trigger-tekton

# Using custom project runner

# Check if we have access to required tools and cluster
check-environment:
  stage: check-environment
  tags:
    - swqa-tekton-poc-runner  # Use custom project runner
  script:
    - "echo 'üîç Checking environment and available tools...'"
    - "echo 'Runner: $CI_RUNNER_DESCRIPTION'"
    - "echo 'Runner Tags: $CI_RUNNER_TAGS'"
    - "echo 'OS: $CI_SERVER_VERSION'"
    - "which curl || echo 'curl not available'"
    - "which kubectl || echo 'kubectl not available - will use curl instead'"
    - "echo '‚úÖ Basic environment check completed'"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - when: never
  allow_failure: true

# Trigger Tekton Pipeline execution
trigger-tekton-pipeline:
  stage: trigger-tekton
  # Use the same runner machine as GitHub Actions (for POC)
  # In production, consider using dedicated GitLab runner
  tags:
    - swqa-tekton-poc-runner  # Use custom project runner
  timeout: 10 minutes
  
  # Define GitLab CI variables for easy reference
  variables:
    EVENTLISTENER_URL: "http://10.117.3.193:30080"  # NodePort access to EventListener
    TEKTON_NAMESPACE: "tekton-pipelines"
    TEKTON_DASHBOARD: "http://tekton.10.117.3.193.nip.io"
  
  before_script:
    - "echo 'üöÄ GitLab CI/CD triggering Tekton Pipeline...'"
    - "echo 'üìã Project: $CI_PROJECT_NAME'"
    - "echo 'üîç Commit: $CI_COMMIT_SHA'"
    - "echo 'üìÖ Pipeline: $CI_PIPELINE_ID'"
  
  script:
    # Step 1: Check available tools and environment
    - "echo 'üîç Checking available tools...'"
    - "if command -v kubectl >/dev/null 2>&1; then echo '‚úÖ kubectl available'; KUBECTL_AVAILABLE=true; else echo '‚ùå kubectl not available'; KUBECTL_AVAILABLE=false; fi"
    - "if command -v curl >/dev/null 2>&1; then echo '‚úÖ curl available'; else echo '‚ùå curl not available'; exit 1; fi"
    
    # Step 2: Prepare EventListener URL (use fixed IP if kubectl not available)
    - "echo 'üîç Preparing EventListener access...'"
    - |
      if [ "$KUBECTL_AVAILABLE" = "true" ]; then
        echo "üîç Getting cluster node IP dynamically..."
        NODE_IP=$(timeout 30 kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}' 2>/dev/null || echo "10.117.3.193")
      else
        echo "üîç Using configured static IP..."
        NODE_IP="10.117.3.193"
      fi
    - "EVENTLISTENER_URL=\"http://$NODE_IP:30080\""
    - "echo 'üîó EventListener URL: $EVENTLISTENER_URL'"
    
    # Step 3: Apply Tekton resources if kubectl available
    - |
      if [ "$KUBECTL_AVAILABLE" = "true" ]; then
        echo "üìã Applying Tekton Pipeline definitions from current codebase..."
        if [ -f ".tekton/pipelines/task-pytest.yaml" ]; then
          timeout 60 kubectl apply -f .tekton/pipelines/task-pytest.yaml || echo "‚ö†Ô∏è  Failed to apply task"
        fi
        if [ -f ".tekton/pipelines/pipeline.yaml" ]; then
          timeout 60 kubectl apply -f .tekton/pipelines/pipeline.yaml || echo "‚ö†Ô∏è  Failed to apply pipeline"
        fi
      else
        echo "‚ö†Ô∏è  kubectl not available - assuming Tekton resources are already deployed"
      fi
    
    # Step 4: Calculate pipeline run info
    - "SHORT_SHA=$(echo \"$CI_COMMIT_SHA\" | cut -c1-8)"
    - "PIPELINERUN_NAME=\"pytest-run-$SHORT_SHA\""
    - "echo 'üéØ Planned PipelineRun: $PIPELINERUN_NAME'"
    
    # Construct GitHub-style payload for EventListener compatibility
    - |
      PAYLOAD=$(cat <<EOF
      {
        "repository": {
          "clone_url": "$CI_PROJECT_URL.git",
          "name": "$CI_PROJECT_NAME"
        },
        "after": "$CI_COMMIT_SHA",
        "short_sha": "$SHORT_SHA",
        "ref": "$CI_COMMIT_REF_NAME"
      }
      EOF
      )
    
    # Send HTTP POST request to EventListener
    - "echo 'üöÄ Triggering Tekton Pipeline execution...'"
    - "echo 'üì° Target URL: $EVENTLISTENER_URL'"
    - "echo 'üîç Commit SHA: $CI_COMMIT_SHA'"
    - |
      RESPONSE=$(timeout 60 curl -w "\nHTTP_CODE:%{http_code}" -X POST $EVENTLISTENER_URL \
        -H "Content-Type: application/json" \
        -H "X-GitHub-Event: push" \
        -d "$PAYLOAD")
    
    - "HTTP_CODE=$(echo \"$RESPONSE\" | grep \"HTTP_CODE:\" | cut -d: -f2)"
    
    # Verify successful trigger
    - |
      if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
        echo "‚úÖ Tekton Pipeline triggered successfully!"
        echo "üìä Dashboard: $TEKTON_DASHBOARD"
        echo "üéØ PipelineRun: $PIPELINERUN_NAME"
        echo "üîó Direct Link: $TEKTON_DASHBOARD/#/namespaces/$TEKTON_NAMESPACE/pipelineruns/$PIPELINERUN_NAME"
        echo "‚è±Ô∏è  Check dashboard in ~30 seconds for execution status"
        echo ""
        echo "üåê Test Reports will be available at:"
        echo "   üìä http://tekton.10.117.3.193.nip.io/artifacts/"
        echo "   üéØ http://tekton.10.117.3.193.nip.io/artifacts/$PIPELINERUN_NAME/"
      else
        echo "‚ùå Failed to trigger Tekton Pipeline (HTTP $HTTP_CODE)"
        echo "Response: $RESPONSE"
        exit 1
      fi
  
  # Run only on main branch pushes and merge requests
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - when: never
  
  # Allow manual trigger from GitLab UI
  when: on_success

# Optional: Add a job to show GitLab-specific information
show-gitlab-info:
  stage: trigger-tekton
  tags:
    - swqa-tekton-poc-runner  # Use custom project runner
  script:
    - "echo 'üìä GitLab CI/CD Information:'"
    - "echo '   Project: $CI_PROJECT_NAME ($CI_PROJECT_ID)'"
    - "echo '   Pipeline: $CI_PIPELINE_ID'"
    - "echo '   Job: $CI_JOB_ID'"
    - "echo '   Commit: $CI_COMMIT_SHA'"
    - "echo '   Branch: $CI_COMMIT_REF_NAME'"
    - "echo '   Author: $CI_COMMIT_AUTHOR'"
    - "echo '   URL: $CI_PROJECT_URL'"
    - "echo ''"
    - "echo 'üîó GitLab Pipeline URL:'"
    - "echo '   $CI_PROJECT_URL/-/pipelines/$CI_PIPELINE_ID'"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - when: never
  allow_failure: true  # This job is informational only
