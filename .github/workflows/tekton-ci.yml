name: Tekton CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  trigger-tekton:
    runs-on: swqa-tekton-poc-runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify kubectl access
      timeout-minutes: 2
      run: |
        echo "Verifying kubectl access to cluster..."
        timeout 30 kubectl version --client
        timeout 30 kubectl config current-context
        timeout 30 kubectl get nodes --no-headers | wc -l | xargs echo "Connected to cluster with nodes:"
        
    - name: Apply Tekton Pipeline definitions
      timeout-minutes: 3
      run: |
        echo "Applying Tekton Pipeline definitions from current codebase..."
        
        # Apply Task definition
        echo "📋 Applying Task..."
        timeout 60 kubectl apply -f .tekton/pipelines/task-pytest.yaml
        
        # Apply Pipeline definition  
        echo "🔄 Applying Pipeline..."
        timeout 60 kubectl apply -f .tekton/pipelines/pipeline.yaml
        
        # Verify resources were created/updated
        echo "✅ Verifying resources..."
        timeout 30 kubectl get task pytest-task -n default
        timeout 30 kubectl get pipeline pytest-pipeline -n default
        
    - name: Trigger Tekton Pipeline execution
      timeout-minutes: 5
      run: |
        # Use NodePort for external access (Runner cannot reach ClusterIP network)
        echo "🔍 Getting cluster node IP..."
        NODE_IP=$(timeout 30 kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        EVENTLISTENER_URL="http://$NODE_IP:30080"
        
        echo "🔍 Using NodePort access: $EVENTLISTENER_URL"
        
        # Construct GitHub-style payload
        PAYLOAD=$(cat <<EOF
        {
          "repository": {
            "clone_url": "${{ github.server_url }}/${{ github.repository }}.git",
            "name": "${{ github.event.repository.name }}",
            "html_url": "${{ github.server_url }}/${{ github.repository }}"
          },
          "after": "${{ github.sha }}",
          "ref": "${{ github.ref }}",
          "head_commit": {
            "id": "${{ github.sha }}",
            "message": "${{ github.event.head_commit.message }}"
          }
        }
        EOF
        )
        
        # Send HTTP POST request to EventListener with timeout
        echo "🚀 Triggering Tekton Pipeline execution..."
        echo "📡 Target URL: $EVENTLISTENER_URL"
        echo "🔍 Commit SHA: ${{ github.sha }}"
        
        RESPONSE=$(timeout 60 curl -w "\nHTTP_CODE:%{http_code}" -X POST $EVENTLISTENER_URL \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Event: push" \
          -d "$PAYLOAD")
        
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        
        if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
          echo "✅ Tekton Pipeline triggered successfully!"
          echo "📊 Dashboard: http://tekton.10.117.3.193.nip.io"
          echo "🔍 PipelineRun: pytest-run-${{ github.sha }}"
          echo "⏱️  Check dashboard in ~30 seconds for execution status"
        else
          echo "❌ Failed to trigger Tekton Pipeline (HTTP $HTTP_CODE)"
          echo "Response: $RESPONSE"
          exit 1
        fi
