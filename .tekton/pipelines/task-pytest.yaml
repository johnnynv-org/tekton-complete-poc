apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pytest-task
  namespace: tekton-pipelines
spec:
  description: Run pytest tests for the project
  # Template for all steps (reduces repetition)
  stepTemplate:
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      runAsNonRoot: true
      runAsUser: 65532
      seccompProfile:
        type: RuntimeDefault
  params:
    - name: git-url
      type: string
      description: Git repository URL
    - name: git-revision
      type: string
      description: Git revision to checkout
      default: main
  workspaces:
    - name: source
      description: The workspace containing the source code
  steps:
    - name: git-clone
      image: alpine/git:latest
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        set -e
        echo "Cloning repository $(params.git-url) at revision $(params.git-revision)"
        
        # Disable Git ownership checks for this workspace
        export GIT_CONFIG_GLOBAL=""
        git config --global --add safe.directory '*' || true
        
        # Alternative: use environment variable to disable ownership checks
        export GIT_CEILING_DIRECTORIES=""
        
        # Clone and checkout with ownership checks disabled
        git -c safe.directory='*' clone $(params.git-url) .
        git -c safe.directory='*' checkout $(params.git-revision)
        echo "Repository cloned successfully"
        ls -la
    
    - name: run-python-tests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        
        # Install dependencies once (with proper permissions for restricted user)
        echo "Installing Python dependencies..."
        
        # Set up a writable pip target directory
        export PYTHONUSERBASE=/workspace/source/.local
        mkdir -p $PYTHONUSERBASE
        export PATH=$PYTHONUSERBASE/bin:$PATH
        
        # Install with user target to our writable workspace
        pip install --user --break-system-packages -r requirements.txt
        echo "Dependencies installed successfully to $PYTHONUSERBASE"
        
        # Create reports directory
        mkdir -p reports
        
        # Run all tests with HTML and coverage reports
        echo "Running all pytest tests with reports..."
        python -m pytest tests/ -v --tb=short \
          --html=reports/pytest-report.html --self-contained-html \
          --cov=src --cov-report=html:reports/coverage-html \
          --cov-report=xml:reports/coverage.xml \
          --cov-report=term-missing
        echo "All tests completed successfully"
        
        # Run smoke tests
        echo "Running smoke tests with -m marker..."
        python -m pytest tests/ -v --tb=short -m smoke \
          --html=reports/smoke-tests.html --self-contained-html
        echo "Smoke tests completed successfully"
        
        # Run main program
        echo "Running main program..."
        python main.py > reports/main-output.log 2>&1
        echo "Main program executed successfully"
        
        # Generate test summary
        echo "=== TEST SUMMARY ===" > reports/summary.txt
        echo "Generated at: $(date)" >> reports/summary.txt
        echo "Git SHA: $(params.git-revision)" >> reports/summary.txt
        echo "Repository: $(params.git-url)" >> reports/summary.txt
        echo "" >> reports/summary.txt
        
        # Count test results (approximate)
        TOTAL_TESTS=$(grep -o "test session starts" reports/pytest-report.html | wc -l)
        echo "Test execution completed. Check reports/ directory for details." >> reports/summary.txt
        ls -la reports/ >> reports/summary.txt
    
    - name: prepare-test-reports
      image: alpine:latest
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        set -e
        
        echo "📊 Preparing Test Reports Summary..."
        
        # Create a simple index page with links to all reports
        cat > reports/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Pytest Test Reports - Tekton POC</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
                .section { margin: 20px 0; padding: 15px; background: #ecf0f1; border-radius: 5px; }
                .section h3 { color: #27ae60; margin-top: 0; }
                a { color: #3498db; text-decoration: none; font-weight: bold; }
                a:hover { text-decoration: underline; }
                .download-section { background: #fff3cd; border-left: 4px solid #ffc107; }
                .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
                .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
                ul { list-style-type: none; padding: 0; }
                li { margin: 8px 0; padding: 8px; background: white; border-radius: 3px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🧪 Pytest Test Reports - Tekton POC</h1>
                
                <div class="section">
                    <h3>📊 Test Reports</h3>
                    <ul>
                        <li>📈 <a href="pytest-report.html">Full Test Report (HTML)</a> - Complete test results with details</li>
                        <li>💨 <a href="smoke-tests.html">Smoke Tests Report</a> - Critical functionality tests</li>
                        <li>📋 <a href="coverage-html/index.html">Code Coverage Report</a> - Line-by-line coverage analysis</li>
                        <li>📄 <a href="summary.txt">Test Summary</a> - Quick overview and logs</li>
                    </ul>
                </div>
                
                <div class="section download-section">
                    <h3>⬇️ Download Artifacts</h3>
                    <ul>
                        <li>📁 <a href="coverage.xml">Coverage XML</a> - Machine-readable coverage data</li>
                        <li>📜 <a href="main-output.log">Application Output Log</a> - Main program execution log</li>
                        <li>📊 <a href="summary.txt">Summary Text File</a> - Test execution summary</li>
                    </ul>
                </div>
                
                <div class="status success">
                    <strong>✅ Test Execution Completed!</strong><br>
                    Pipeline: pytest-pipeline | Namespace: tekton-pipelines<br>
                    Git SHA: Check summary.txt for details
                </div>
                
                <div class="section">
                    <h3>🔗 Quick Links</h3>
                    <ul>
                        <li>🏠 <a href="http://tekton.10.117.3.193.nip.io">Tekton Dashboard</a></li>
                        <li>📱 <a href="https://github.com/johnnynv/tekton-poc">GitHub Repository</a></li>
                    </ul>
                </div>
                
                <div class="section">
                    <h3>ℹ️ Access Instructions</h3>
                    <p><strong>Note:</strong> To view these reports, you'll need to:</p>
                    <ol>
                        <li>Copy reports from the PipelineRun workspace</li>
                        <li>Or check the Tekton logs for detailed results</li>
                        <li>Or use <code>kubectl port-forward</code> to access the workspace</li>
                    </ol>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        echo "✅ Test Reports prepared successfully!"
        echo "📋 Available report files:"
        ls -la reports/
        echo ""
        echo "📊 Report Summary:"
        if [ -f reports/summary.txt ]; then
          cat reports/summary.txt
        fi
