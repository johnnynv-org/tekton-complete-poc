apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-reports-server
  namespace: tekton-pipelines
  labels:
    app: test-reports-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-reports-server
  template:
    metadata:
      labels:
        app: test-reports-server
    spec:
      # Set fsGroup to ensure consistent permissions
      securityContext:
        fsGroup: 65532  # Match Tekton Task's runAsUser
        fsGroupChangePolicy: "OnRootMismatch"
      
      # Init container to set up proper permissions
      initContainers:
      - name: setup-permissions
        image: busybox:latest
        securityContext:
          runAsUser: 0  # Run as root to set permissions
          runAsNonRoot: false
        command: 
        - /bin/sh
        - -c
        - |
          echo "ðŸ”§ Setting up shared volume permissions..."
          
          # Ensure the reports directory exists
          mkdir -p /shared-reports
          
          # Set ownership to nobody:nobody (65532:65532) to match Tekton Tasks
          chown -R 65532:65532 /shared-reports
          
          # Set proper permissions: rwxrwxr-x
          chmod -R 775 /shared-reports
          
          echo "âœ… Permissions configured:"
          ls -la /shared-reports/
          echo "ðŸ“Š Directory ownership and permissions ready for Tekton Tasks"
        volumeMounts:
        - name: reports-volume
          mountPath: /shared-reports
      
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 8080
        # Run nginx as nobody user to match volume permissions
        securityContext:
          runAsUser: 65532
          runAsGroup: 65532
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
            add: ["NET_BIND_SERVICE"]  # Allow binding to port 80
          seccompProfile:
            type: RuntimeDefault
        # Use custom nginx.conf instead of default entrypoint
        command: ["nginx"]
        args: ["-c", "/etc/nginx/custom/nginx.conf", "-g", "daemon off;"]
        volumeMounts:
        - name: reports-volume
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/custom
      volumes:
      - name: reports-volume
        persistentVolumeClaim:
          claimName: test-reports-pvc
      - name: nginx-config
        configMap:
          name: nginx-reports-config
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test-reports-pvc
  namespace: tekton-pipelines
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: immediate-local
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-reports-config
  namespace: tekton-pipelines
data:
  nginx.conf: |
    # Nginx config for running as non-root user (65532)
    worker_processes 1;
    error_log /dev/stderr;
    pid /tmp/nginx.pid;
    
    events {
        worker_connections 1024;
    }
    
    http {
        # Temporary directories for non-root user
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path /tmp/proxy_temp_path;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /dev/stdout main;
        
        sendfile on;
        keepalive_timeout 65;
        
        server {
            listen 8080;
            server_name _;
            root /usr/share/nginx/html;
            index index.html;
            
            # Enable directory listing for downloads
            location / {
                try_files $uri $uri/ =404;
                autoindex on;
                autoindex_exact_size off;
                autoindex_localtime on;
            }
            
            # Set proper MIME types
            location ~* \.(html|css|js)$ {
                expires 1h;
                add_header Cache-Control "public, immutable";
            }
            
            location ~* \.(xml|log|txt)$ {
                add_header Content-Disposition "attachment";
            }
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: test-reports-service
  namespace: tekton-pipelines
  labels:
    app: test-reports-server
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      name: http
  selector:
    app: test-reports-server
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-reports-ingress
  namespace: tekton-pipelines
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - host: results.10.34.2.129.nip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: test-reports-service
                port:
                  number: 80
